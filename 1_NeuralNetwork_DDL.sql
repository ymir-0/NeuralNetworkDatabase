/*
 * this script create the neuron network tables
 * it can be executed by neuralnetwork user
*/
-- TODO : when 2 users : grant CRUD to user (no-admin)
-- clean
DROP TABLE IF EXISTS neuralnetwork.TRAINING_SESSION; 
DROP TABLE IF EXISTS neuralnetwork.TRAINING_SET; 
DROP TABLE IF EXISTS neuralnetwork.LAYER; 
DROP TABLE IF EXISTS neuralnetwork.PERCEPTRON; 
DROP SCHEMA IF EXISTS neuralnetwork; 
-- create schema
CREATE SCHEMA neuralnetwork;
-- create tables
CREATE TABLE neuralnetwork.PERCEPTRON (
	ID SERIAL UNIQUE,
	COMMENTS TEXT
);
CREATE TABLE neuralnetwork.LAYER (
	ID_PERCEPTRON INTEGER REFERENCES neuralnetwork.PERCEPTRON(ID),
	DEPTH_INDEX INTEGER NOT NULL,
	WEIGHTS NUMERIC[][] NOT NULL,
	BIASES NUMERIC[] NOT NULL,
	PRIMARY KEY (ID_PERCEPTRON, DEPTH_INDEX)
);
CREATE TABLE neuralnetwork.TRAINING_SET (
	ID SERIAL UNIQUE,
	INPUTS NUMERIC[][] NOT NULL,
	EXPECTED_OUTPUTS NUMERIC[][] NOT NULL,
	COMMENTS TEXT
);
CREATE TABLE neuralnetwork.TRAINING_SESSION (
	-- ids
	PERCEPTRON_ID INTEGER PRIMARY KEY REFERENCES neuralnetwork.PERCEPTRON (ID),
	TRAINING_SET_ID INTEGER REFERENCES neuralnetwork.TRAINING_SET (ID),
	-- training & test sets
	TRAINING_CHUNK_SIZE INTEGER NOT NULL,
	TRAINING_INPUTS NUMERIC[][] NOT NULL,
	TRAINING_EXPECTED_OUTPUTS NUMERIC[][] NOT NULL,
	TEST_INPUTS NUMERIC[][] NOT NULL,
	TEST_EXPECTED_OUTPUTS NUMERIC[][] NOT NULL,
	-- process state
	STATUS VARCHAR(11) NOT NULL DEFAULT 'INITIALIZED',
	PID INTEGER,
	-- learning report
	MEAN_DIFFERENTIAL_ERRORS NUMERIC[],
	TRAINED_ELEMENTS_NUMBERS INTEGER[],
	ERROR_ELEMENTS_NUMBERS INTEGER[],
	-- comments
	COMMENTS TEXT
);
